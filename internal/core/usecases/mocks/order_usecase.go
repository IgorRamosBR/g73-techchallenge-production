// Code generated by MockGen. DO NOT EDIT.
// Source: order_usecase.go
//
// Generated by this command:
//
//	mockgen -source=order_usecase.go -destination=mocks/order_usecase.go
//
// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	reflect "reflect"

	models "github.com/IgorRamosBR/g73-techchallenge-production/internal/core/models"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// GetOrders mocks base method.
func (m *MockOrderUseCase) GetOrders() (models.ProductionOrderPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].(models.ProductionOrderPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderUseCaseMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderUseCase)(nil).GetOrders))
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderUseCase) UpdateOrderStatus(orderId, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", orderId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderUseCaseMockRecorder) UpdateOrderStatus(orderId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderUseCase)(nil).UpdateOrderStatus), orderId, status)
}
